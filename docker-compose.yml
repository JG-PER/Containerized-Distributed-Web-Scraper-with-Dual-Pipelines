version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:3.13-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 30s
      retries: 3
  scraper:
    build: ./scraper
    container_name: scraper-1
    networks:
      - app-network
    environment:
      - PYTHONUNBUFFERED=1  # Add this line to fix no output
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
  processor:
    build: ./processor
    container_name: processor-1
    networks:
      - app-network
    environment:
      - PYTHONUNBUFFERED=1
      - RABBITMQ_HOST=rabbitmq
      - DB_HOST=db
      - POSTGRES_DB=scraper_data
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
  backend_api:
    build: ./backend_api
    container_name: backend-api
    ports:
      - "5001:5000"
    networks:
      - app-network
    environment:
      - FLASK_APP=api.py
      - PYTHONUNBUFFERED=1
      - DB_HOST=db
      - POSTGRES_DB=scraper_data
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    depends_on:
      db:
        condition: service_healthy
  frontend:
      build: ./frontend
      container_name: frontend-dashboard
      ports:
        - "8080:80"
      networks:
        - app-network
      depends_on:
        - backend_api
# ... (Place this after the 'frontend' service definition)

  # --- NEW PDF GENERATION SERVICES (Corrected Names) ---
# In your existing webcontentscraper service definition
  webcontentscraper:
    # This is the default, fast scraper that uses the 'requests' library
    build: ./webcontent_scraper
    container_name: pdf-scraper-1
    shm_size: 2g # <-- Add this line
    networks:
      - app-network
    environment:
      - PYTHONUNBUFFERED=1
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy

  webcontentprocessor:
    build: ./webcontent_processor
    container_name: pdf-processor-1
    networks:
      - app-network
    environment:
      - PYTHONUNBUFFERED=1
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - pdf_output:/output
    depends_on:
      rabbitmq:
        condition: service_healthy




        




  db:
    image: "postgres:16"
    container_name: postgres-db
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=scraper_data
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d scraper_data"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

# --- VOLUMES ---
# Add the 'pdf_output' volume to the existing volumes section
volumes:
  postgres-data:
    driver: local
  pdf_output:
    driver: local